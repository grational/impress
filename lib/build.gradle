/*
 * This build file was auto generated by 'gigawatt'
 * @author gsus
 * @date 17-04-2025 07:32
 */

// [plugins] this block must be the first
plugins {
	// support for groovy
	id 'groovy'
	// support for the api keyword in the dependencies section
	id 'java-library'
	// required by jitpack
	id 'maven-publish'
	// awesome git tag / gradle version integration
	id 'pl.allegro.tech.build.axion-release' version '1.18.18'
	// docker-compose support
	id 'com.avast.gradle.docker-compose' version '0.17.12'
}

// [general] configuration
project.ext {
	groovyVersion = '4.0.26'
}

project.with {
	//project.name is set in the settings.gradle with rootProject.name
	group       'it.grational'
	version     scmVersion.version // '0.5.0' (remove -SNAPSHOT for releases)
	description 'Provide all major HTTP method implementations and additional functionalities as caching and retrying.'
}

allprojects {
	sourceCompatibility = JavaVersion.toVersion('21')
	targetCompatibility = sourceCompatibility
}

repositories {
	mavenCentral()

	maven { url "https://jitpack.io" }
}

dependencies {
	api (
		"org.apache.groovy:groovy:$groovyVersion",
		"software.amazon.awssdk:dynamodb:2.31.22"
	)
	

	// We use the awesome Spock testing and specification framework
	testImplementation (
		'org.spockframework:spock-core:2.3-groovy-4.0'
	)
}

// test configuration {{{
tasks.withType(Test) {
	useJUnitPlatform()
	maxParallelForks = Runtime.runtime.availableProcessors() / 2
	jvmArgs('--add-opens=java.base/java.util=ALL-UNNAMED')
}
jar {
	dependsOn 'check'
}

check {
	dependsOn 'clean'
}

// [tasks] definition
task uniTest(type: Test) {
	description = 'unit tests task'
	exclude '**/*ISpec*'
	exclude '**/*FSpec*'
}
task intTest(type: Test) {
	description = 'integration tests task'
	exclude '**/*USpec*'
	exclude '**/*FSpec*'
}
task funTest(type: Test) {
	description = 'functional tests task'
	exclude '**/*USpec*'
	exclude '**/*ISpec*'
}
gradle.startParameter.excludedTaskNames += "uniTest"
gradle.startParameter.excludedTaskNames += "intTest"
gradle.startParameter.excludedTaskNames += "funTest"
// }}}

// jipack publishing {{{
publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId = 'com.github.grational'
			artifactId = 'impress'
			version = scmVersion.version // '0.5.0' (remove -SNAPSHOT for releases)
			from components.java
		}
	}
}
// }}}

// docker-compose configuration {{{
tasks.composeUp {
	onlyIf {
		containersNeeded()
	}
}

test {
	dependsOn tasks.composeUp
}

dockerCompose {
	useComposeFiles = [ 'docker-compose.yml' ]
	waitForTcpPorts = true
	useDockerComposeV2 = false

	// keep containers running
	stopContainers = false
	removeContainers = false
	removeVolumes = false
}

boolean containersNeeded() {
	def cli = gradle.startParameter.taskRequests
	
	boolean composeSpec = cli.any {
		it.args.any { arg ->
			arg =~ /CSpec/
		}
	}
	
	boolean allSpecs = cli.any {
		it.args.size() == 1 && it.args[0] == 'test'
	}

	return composeSpec || allSpecs
}
// }}}

// vim: ft=groovy:fdm=marker
